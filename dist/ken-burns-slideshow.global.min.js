(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Exposes the module to the global context (`window.KenBurnsSlideshow`)
window.KenBurnsSlideshow = require('./index.js')

},{"./index.js":2}],2:[function(require,module,exports){
'use strict'

// Class
// -----

function KenBurnsSlideshow (props) {
  this.props = setProps(props)

  this.state = {
    // 'true' if the slideshow is runing.
    isRunning: false,
    // DOM node of currently visible slide.
    slideVisibleEl: null,
    // Number of currently visible slide.
    slideVisibleNum: null,
    // Holds the `setInterval` reference.
    interval: null  
  }
}

// Public
// ------

KenBurnsSlideshow.prototype.init = function init () {
  injectHtml(this.props.el, this.props.cssPrefix)
  randomizeEffectOrigin(this.props.el, this.props.cssPrefix)
  
  this.state.interval = startSlide(this.props, this.state)
  this.state.isRunning = true
  this.state.slideVisibleEl = this.props.el.querySelector('.' + this.props.cssPrefix + '--has-kenBurnsFx')
  this.state.slideVisibleNum = 0
}

KenBurnsSlideshow.prototype.stop = function stop () {
  clearInterval(this.state.interval)
  this.state.isRunning = false
}

// Private
// -------

function setProps (props) {
  var props_ = {}

  // Properties validation.
  if (!props.el) {
    throw new Error('Property `el` must be declared')
  }

  props_.el = props.el
  props_.cssPrefix = props.cssPrefix || 'ken-burns-slideshow'
  props_.transitionDelay = props.transitionDelay || 5000

  return props_
}

function injectHtml (el, cssPrefix) {
  el.classList.add(cssPrefix)

  ;[].forEach.call(el.querySelectorAll('li'), function (li) {
    li.classList.add(cssPrefix + '__slide')
  })

  ;[].forEach.call(el.querySelectorAll('img'), function (img, index) {
    if (index === 0) {
      img.classList.add(cssPrefix + '--has-kenBurnsFx')
    }
    img.classList.add(cssPrefix + '__slide-img')
  })
}

function randomizeEffectOrigin (el, cssPrefix) {
  var yAxisOrigins = ['bottom', 'center', 'top']
  var xAxisOrigins = ['left', 'center', 'right']
  var slides = el.querySelectorAll('.' + cssPrefix + '__slide-img')

  ;[].forEach.call(slides, function (slide) {
    var xAxisOrigin = getRandomElement(xAxisOrigins)
    var yAxisOrigin = getRandomElement(yAxisOrigins)
    
    slide.style.transformOrigin =
      '' + xAxisOrigin + ' ' + yAxisOrigins
  })
}

function getRandomElement (array) {
  return array[Math.floor(Math.random() * array.length)]
}

function startSlide (props, state) {
  return setInterval(
    changeSlide.bind(null, props, state),
    props.transitionDelay
  )
}

function changeSlide (props, state) {
  var slides = props.el.querySelectorAll('.' + props.cssPrefix + '__slide-img')
  
  if (state.slideVisibleNum + 1 === slides.length) {
    state.slideVisibleNum = 0
  } else {
    state.slideVisibleNum += 1
  }

  state
    .slideVisibleEl
    .classList
    .remove(props.cssPrefix + '--has-kenBurnsFx')

  state.slideVisibleEl = slides[state.slideVisibleNum]
  
  state
    .slideVisibleEl
    .classList
    .add(props.cssPrefix + '--has-kenBurnsFx')
}

// Exports
// -------

module.exports = KenBurnsSlideshow

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvZXhwb3NlLXRvLXdpbmRvdy5qcyIsInNyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLy8gRXhwb3NlcyB0aGUgbW9kdWxlIHRvIHRoZSBnbG9iYWwgY29udGV4dCAoYHdpbmRvdy5LZW5CdXJuc1NsaWRlc2hvd2ApXG53aW5kb3cuS2VuQnVybnNTbGlkZXNob3cgPSByZXF1aXJlKCcuL2luZGV4LmpzJylcbiIsIid1c2Ugc3RyaWN0J1xuXG4vLyBDbGFzc1xuLy8gLS0tLS1cblxuZnVuY3Rpb24gS2VuQnVybnNTbGlkZXNob3cgKHByb3BzKSB7XG4gIHRoaXMucHJvcHMgPSBzZXRQcm9wcyhwcm9wcylcblxuICB0aGlzLnN0YXRlID0ge1xuICAgIC8vICd0cnVlJyBpZiB0aGUgc2xpZGVzaG93IGlzIHJ1bmluZy5cbiAgICBpc1J1bm5pbmc6IGZhbHNlLFxuICAgIC8vIERPTSBub2RlIG9mIGN1cnJlbnRseSB2aXNpYmxlIHNsaWRlLlxuICAgIHNsaWRlVmlzaWJsZUVsOiBudWxsLFxuICAgIC8vIE51bWJlciBvZiBjdXJyZW50bHkgdmlzaWJsZSBzbGlkZS5cbiAgICBzbGlkZVZpc2libGVOdW06IG51bGwsXG4gICAgLy8gSG9sZHMgdGhlIGBzZXRJbnRlcnZhbGAgcmVmZXJlbmNlLlxuICAgIGludGVydmFsOiBudWxsICBcbiAgfVxufVxuXG4vLyBQdWJsaWNcbi8vIC0tLS0tLVxuXG5LZW5CdXJuc1NsaWRlc2hvdy5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIGluaXQgKCkge1xuICBpbmplY3RIdG1sKHRoaXMucHJvcHMuZWwsIHRoaXMucHJvcHMuY3NzUHJlZml4KVxuICByYW5kb21pemVFZmZlY3RPcmlnaW4odGhpcy5wcm9wcy5lbCwgdGhpcy5wcm9wcy5jc3NQcmVmaXgpXG4gIFxuICB0aGlzLnN0YXRlLmludGVydmFsID0gc3RhcnRTbGlkZSh0aGlzLnByb3BzLCB0aGlzLnN0YXRlKVxuICB0aGlzLnN0YXRlLmlzUnVubmluZyA9IHRydWVcbiAgdGhpcy5zdGF0ZS5zbGlkZVZpc2libGVFbCA9IHRoaXMucHJvcHMuZWwucXVlcnlTZWxlY3RvcignLicgKyB0aGlzLnByb3BzLmNzc1ByZWZpeCArICctLWhhcy1rZW5CdXJuc0Z4JylcbiAgdGhpcy5zdGF0ZS5zbGlkZVZpc2libGVOdW0gPSAwXG59XG5cbktlbkJ1cm5zU2xpZGVzaG93LnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gc3RvcCAoKSB7XG4gIGNsZWFySW50ZXJ2YWwodGhpcy5zdGF0ZS5pbnRlcnZhbClcbiAgdGhpcy5zdGF0ZS5pc1J1bm5pbmcgPSBmYWxzZVxufVxuXG4vLyBQcml2YXRlXG4vLyAtLS0tLS0tXG5cbmZ1bmN0aW9uIHNldFByb3BzIChwcm9wcykge1xuICB2YXIgcHJvcHNfID0ge31cblxuICAvLyBQcm9wZXJ0aWVzIHZhbGlkYXRpb24uXG4gIGlmICghcHJvcHMuZWwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb3BlcnR5IGBlbGAgbXVzdCBiZSBkZWNsYXJlZCcpXG4gIH1cblxuICBwcm9wc18uZWwgPSBwcm9wcy5lbFxuICBwcm9wc18uY3NzUHJlZml4ID0gcHJvcHMuY3NzUHJlZml4IHx8ICdrZW4tYnVybnMtc2xpZGVzaG93J1xuICBwcm9wc18udHJhbnNpdGlvbkRlbGF5ID0gcHJvcHMudHJhbnNpdGlvbkRlbGF5IHx8IDUwMDBcblxuICByZXR1cm4gcHJvcHNfXG59XG5cbmZ1bmN0aW9uIGluamVjdEh0bWwgKGVsLCBjc3NQcmVmaXgpIHtcbiAgZWwuY2xhc3NMaXN0LmFkZChjc3NQcmVmaXgpXG5cbiAgO1tdLmZvckVhY2guY2FsbChlbC5xdWVyeVNlbGVjdG9yQWxsKCdsaScpLCBmdW5jdGlvbiAobGkpIHtcbiAgICBsaS5jbGFzc0xpc3QuYWRkKGNzc1ByZWZpeCArICdfX3NsaWRlJylcbiAgfSlcblxuICA7W10uZm9yRWFjaC5jYWxsKGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2ltZycpLCBmdW5jdGlvbiAoaW1nLCBpbmRleCkge1xuICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgaW1nLmNsYXNzTGlzdC5hZGQoY3NzUHJlZml4ICsgJy0taGFzLWtlbkJ1cm5zRngnKVxuICAgIH1cbiAgICBpbWcuY2xhc3NMaXN0LmFkZChjc3NQcmVmaXggKyAnX19zbGlkZS1pbWcnKVxuICB9KVxufVxuXG5mdW5jdGlvbiByYW5kb21pemVFZmZlY3RPcmlnaW4gKGVsLCBjc3NQcmVmaXgpIHtcbiAgdmFyIHlBeGlzT3JpZ2lucyA9IFsnYm90dG9tJywgJ2NlbnRlcicsICd0b3AnXVxuICB2YXIgeEF4aXNPcmlnaW5zID0gWydsZWZ0JywgJ2NlbnRlcicsICdyaWdodCddXG4gIHZhciBzbGlkZXMgPSBlbC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIGNzc1ByZWZpeCArICdfX3NsaWRlLWltZycpXG5cbiAgO1tdLmZvckVhY2guY2FsbChzbGlkZXMsIGZ1bmN0aW9uIChzbGlkZSkge1xuICAgIHZhciB4QXhpc09yaWdpbiA9IGdldFJhbmRvbUVsZW1lbnQoeEF4aXNPcmlnaW5zKVxuICAgIHZhciB5QXhpc09yaWdpbiA9IGdldFJhbmRvbUVsZW1lbnQoeUF4aXNPcmlnaW5zKVxuICAgIFxuICAgIHNsaWRlLnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9XG4gICAgICAnJyArIHhBeGlzT3JpZ2luICsgJyAnICsgeUF4aXNPcmlnaW5zXG4gIH0pXG59XG5cbmZ1bmN0aW9uIGdldFJhbmRvbUVsZW1lbnQgKGFycmF5KSB7XG4gIHJldHVybiBhcnJheVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhcnJheS5sZW5ndGgpXVxufVxuXG5mdW5jdGlvbiBzdGFydFNsaWRlIChwcm9wcywgc3RhdGUpIHtcbiAgcmV0dXJuIHNldEludGVydmFsKFxuICAgIGNoYW5nZVNsaWRlLmJpbmQobnVsbCwgcHJvcHMsIHN0YXRlKSxcbiAgICBwcm9wcy50cmFuc2l0aW9uRGVsYXlcbiAgKVxufVxuXG5mdW5jdGlvbiBjaGFuZ2VTbGlkZSAocHJvcHMsIHN0YXRlKSB7XG4gIHZhciBzbGlkZXMgPSBwcm9wcy5lbC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIHByb3BzLmNzc1ByZWZpeCArICdfX3NsaWRlLWltZycpXG4gIFxuICBpZiAoc3RhdGUuc2xpZGVWaXNpYmxlTnVtICsgMSA9PT0gc2xpZGVzLmxlbmd0aCkge1xuICAgIHN0YXRlLnNsaWRlVmlzaWJsZU51bSA9IDBcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5zbGlkZVZpc2libGVOdW0gKz0gMVxuICB9XG5cbiAgc3RhdGVcbiAgICAuc2xpZGVWaXNpYmxlRWxcbiAgICAuY2xhc3NMaXN0XG4gICAgLnJlbW92ZShwcm9wcy5jc3NQcmVmaXggKyAnLS1oYXMta2VuQnVybnNGeCcpXG5cbiAgc3RhdGUuc2xpZGVWaXNpYmxlRWwgPSBzbGlkZXNbc3RhdGUuc2xpZGVWaXNpYmxlTnVtXVxuICBcbiAgc3RhdGVcbiAgICAuc2xpZGVWaXNpYmxlRWxcbiAgICAuY2xhc3NMaXN0XG4gICAgLmFkZChwcm9wcy5jc3NQcmVmaXggKyAnLS1oYXMta2VuQnVybnNGeCcpXG59XG5cbi8vIEV4cG9ydHNcbi8vIC0tLS0tLS1cblxubW9kdWxlLmV4cG9ydHMgPSBLZW5CdXJuc1NsaWRlc2hvd1xuIl19
